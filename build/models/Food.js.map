{"version":3,"sources":["../../src/models/Food.js"],"names":["Food","request","response","QueryService","allFoods","food_id","aFood","food","rows","new_food_data","name","status","data","error","calories","createFood","created_food","updated_food_data","updateFood","updated_food","deleteFoodToMealAssociation","deleteFood","result","rowCount"],"mappings":";;;;;;;;AAAA;;;;;;;;;;IAEMA,I;;;;;;;;0FACqBC,O,EAASC,Q;;;;;;uBACnBC,uBAAaC,QAAb,E;;;;;;;;;;;;;;;;;;;;;;4FAGYC,O;;;;;;;;uBAENF,uBAAaG,KAAb,CAAmBD,OAAnB,C;;;AAAbE,oB;kDACGA,KAAKC,IAAL,CAAU,CAAV,C;;;;;;;;;;;;;;;;;;;;;;;;4FAMaC,a;;;;;;oBACjBA,cAAcC,I;;;;;kDACV,EAAEC,QAAQ,GAAV,EAAeC,MAAM,EAAEC,OAAO,4BAAT,EAArB,E;;;oBACGJ,cAAcK,Q;;;;;kDACjB,EAAEH,QAAQ,GAAV,EAAeC,MAAM,EAAEC,OAAO,gCAAT,EAArB,E;;;;;uBAGoBV,uBAAaY,UAAb,CAAwBN,aAAxB,C;;;AAArBO,4B;kDACG,EAAEL,QAAQ,GAAV,EAAeC,MAAMI,aAAaR,IAAb,CAAkB,CAAlB,CAArB,E;;;;;kDAEA,EAAEG,QAAQ,GAAV,EAAeC,MAAM,EAAEC,mBAAF,EAArB,E;;;;;;;;;;;;;;;;;;;4FAKWI,iB,EAAmBZ,O;;;;;;;;uBAEdF,uBAAae,UAAb,CAAwBD,iBAAxB,EAA2CZ,OAA3C,C;;;AAArBc,4B;kDACG,EAAER,QAAQ,GAAV,EAAeC,MAAMO,aAAaX,IAAb,CAAkB,CAAlB,CAArB,E;;;;;kDAEA,EAAEG,QAAQ,GAAV,EAAeC,MAAM,EAAEC,mBAAF,EAArB,E;;;;;;;;;;;;;;;;;;;4FAIcR,O;;;;;;;uBACjBF,uBAAaiB,2BAAb,CAAyCf,OAAzC,C;;;;uBACaF,uBAAakB,UAAb,CAAwBhB,OAAxB,C;;;AAAfiB,sB;;oBACCA,OAAOC,Q;;;;;kDACH,EAAEZ,QAAQ,GAAV,EAAeC,MAAM,EAAEC,OAAO,gBAAT,EAArB,E;;;kDAEA,EAAEF,QAAQ,GAAV,E;;;;;;;;;;;;;;;;;;;;;kBAMEX,I","file":"Food.js","sourcesContent":["import QueryService from '../services/QueryService';\n\nclass Food {\n  static async getAllFoods(request, response) {\n    return await QueryService.allFoods();\n  }\n\n  static async getSingleFood(food_id) {\n    try {\n      let food = await QueryService.aFood(food_id);\n      return food.rows[0];\n    } catch(error) {\n      return error;\n    }\n  }\n\n  static async createFood(new_food_data) {\n    if (!new_food_data.name) {\n      return { status: 400, data: { error: 'Name attribute is required' } };\n    } else if (!new_food_data.calories) {\n      return { status: 400, data: { error: 'Calories attribute is required' } };\n    } else {\n      try {\n        let created_food = await QueryService.createFood(new_food_data);\n        return { status: 200, data: created_food.rows[0] };\n      } catch(error) {\n        return { status: 400, data: { error: error } };\n      }\n    }\n  }\n\n  static async updateFood(updated_food_data, food_id) {\n    try {\n      let updated_food = await QueryService.updateFood(updated_food_data, food_id);\n      return { status: 200, data: updated_food.rows[0] };\n    } catch(error) {\n      return { status: 400, data: { error: error } };\n    }\n  }\n\n  static async destroyFood(food_id) {\n    await QueryService.deleteFoodToMealAssociation(food_id);\n    let result = await QueryService.deleteFood(food_id);\n    if (!result.rowCount) {\n      return { status: 404, data: { error: 'Food not found' } } \n    } else {\n      return { status: 204 }\n    }\n    \n  }\n}\n\nexport default Food;\n"]}