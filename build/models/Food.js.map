{"version":3,"sources":["../../src/models/Food.js"],"names":["environment","process","env","NODE_ENV","configuration","require","database","Food","request","response","select","food_id","raw","food","rows","new_food_data","name","status","data","error","calories","created_food","updated_food_data","updated_food"],"mappings":";;;;;;;;;;;;AAAA,IAAMA,cAAcC,QAAQC,GAAR,CAAYC,QAAZ,IAAwB,aAA5C;AACA,IAAMC,gBAAgBC,QAAQ,gBAAR,EAA0BL,WAA1B,CAAtB;AACA,IAAMM,WAAWD,QAAQ,MAAR,EAAgBD,aAAhB,CAAjB;;IAEMG,I;;;;;;;;0FACqBC,O,EAASC,Q;;;;;;uBACnBH,SAAS,OAAT,EAAkBI,MAAlB,E;;;;;;;;;;;;;;;;;;;;;;4FAGYC,O;;;;;;;;uBAENL,SAASM,GAAT,qFACiC,CAACD,OAAD,CADjC,C;;;AAAbE,oB;kDAEGA,KAAKC,IAAL,CAAU,CAAV,C;;;;;;;;;;;;;;;;;;;;;;;;4FAMaC,a;;;;;;oBACjBA,cAAcC,I;;;;;kDACV,EAAEC,QAAQ,GAAV,EAAeC,MAAM,EAAEC,OAAO,4BAAT,EAArB,E;;;oBACGJ,cAAcK,Q;;;;;kDACjB,EAAEH,QAAQ,GAAV,EAAeC,MAAM,EAAEC,OAAO,gCAAT,EAArB,E;;;;;uBAGoBb,SAASM,GAAT,kLAE8C,CAACG,cAAcC,IAAf,EAAqBD,cAAcK,QAAnC,CAF9C,C;;;AAArBC,4B;kDAGG,EAAEJ,QAAQ,GAAV,EAAeC,MAAMG,aAAaP,IAAb,CAAkB,CAAlB,CAArB,E;;;;;kDAEA,EAAEG,QAAQ,GAAV,EAAeC,MAAM,EAAEC,mBAAF,EAArB,E;;;;;;;;;;;;;;;;;;;4FAKWG,iB,EAAmBX,O;;;;;;;;uBAEdL,SAASM,GAAT,gOAG6C,CAACU,kBAAkBN,IAAnB,EAAyBM,kBAAkBF,QAA3C,EAAqDT,OAArD,CAH7C,C;;;AAArBY,4B;kDAIG,EAAEN,QAAQ,GAAV,EAAeC,MAAMK,aAAaT,IAAb,CAAkB,CAAlB,CAArB,E;;;;;kDAEA,EAAEG,QAAQ,GAAV,EAAeC,MAAM,EAAEC,mBAAF,EAArB,E;;;;;;;;;;;;;;;;;;;;;kBAKEZ,I","file":"Food.js","sourcesContent":["const environment = process.env.NODE_ENV || 'development';\nconst configuration = require('../../knexfile')[environment];\nconst database = require('knex')(configuration);\n\nclass Food  {\n  static async getAllFoods(request, response) {\n    return await database('foods').select();\n  }\n\n  static async getSingleFood(food_id) {\n    try {\n      let food = await database.raw(`SELECT foods.* FROM foods\n                                     WHERE foods.id=?`, [food_id]);\n      return food.rows[0];\n    } catch(error) {\n      return error;\n    }\n  }\n\n  static async createFood(new_food_data) {\n    if (!new_food_data.name) {\n      return { status: 400, data: { error: 'Name attribute is required' } };\n    } else if (!new_food_data.calories) {\n      return { status: 400, data: { error: 'Calories attribute is required' } };\n    } else {\n      try {\n        let created_food = await database.raw(`INSERT INTO foods (name, calories)\n                                               VALUES (?, ?)\n                                               RETURNING id, name, calories` , [new_food_data.name, new_food_data.calories]);\n        return { status: 200, data: created_food.rows[0] };\n      } catch(error) {\n        return { status: 400, data: { error: error } };\n      }\n    }\n  }\n\n  static async updateFood(updated_food_data, food_id) {\n    try {\n      let updated_food = await database.raw(`UPDATE foods\n                                             SET name=?, calories=?\n                                             WHERE foods.id=?\n                                             RETURNING id, name, calories`, [updated_food_data.name, updated_food_data.calories, food_id])\n      return { status: 200, data: updated_food.rows[0] };\n    } catch(error) {\n      return { status: 400, data: { error: error } };\n    }\n  }\n}\n\nexport default Food;\n"]}