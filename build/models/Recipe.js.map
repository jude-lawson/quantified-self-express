{"version":3,"sources":["../../src/models/Recipe.js"],"names":["Recipe","food_id","QueryService","aFood","food","food_name","rows","name","toLowerCase","split","join","RecipeService","searchRecipes","search_results","recipes","matches","map","recipe","recipeName","url","id","status","data"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;IAEMA,M;;;;;;;;0FACoBC,O;;;;;;;uBACLC,uBAAaC,KAAb,CAAmBF,OAAnB,C;;;AAAbG,oB;AACAC,yB,GAAYD,KAAKE,IAAL,CAAU,CAAV,EAAaC,IAAb,CAAkBC,WAAlB,GAAgCC,KAAhC,CAAsC,GAAtC,EAA2CC,IAA3C,CAAgD,GAAhD,C;;uBACWC,wBAAcC,aAAd,CAA4BP,SAA5B,C;;;AAAvBQ,8B;AAEAC,uB,GAAUD,eAAeE,OAAf,CAAuBC,GAAvB,CAA2B,UAACC,MAAD,EAAY;AACnD,yBAAO,EAAEV,MAAMU,OAAOC,UAAf,EAA2BC,wCAAsCF,OAAOG,EAAxE,EAAP;AACD,iBAFa,C;iDAIP,EAAEC,QAAQ,GAAV,EAAeC,MAAM,EAAER,SAASA,OAAX,EAArB,E;;;;;;;;;;;;;;;;;;;;;kBAIId,M","file":"Recipe.js","sourcesContent":["import RecipeService from '../services/RecipeService';\nimport QueryService from '../services/QueryService';\n\nclass Recipe {\n  static async getRecipes(food_id) {\n    let food = await QueryService.aFood(food_id)\n    let food_name = food.rows[0].name.toLowerCase().split(' ').join('+');\n    let search_results = await RecipeService.searchRecipes(food_name);\n\n    let recipes = search_results.matches.map((recipe) => {\n      return { name: recipe.recipeName, url: `https://www.yummly.com/recipe/${recipe.id}`}\n    });\n\n    return { status: 200, data: { recipes: recipes } }\n  }\n}\n\nexport default Recipe;\n"]}