{"version":3,"sources":["../../src/models/Meal.js"],"names":["Meal","QueryService","distinctMealsThatHaveFoods","meals","Promise","all","rows","map","meal","aMealsFoods","id","result","name","foods","meal_foods","sort","a","b","meal_id","aMealAndAllItsFoods","rowCount","status","data","error","row","food_id","food_name","calories","meal_name"],"mappings":";;;;;;;;AAAA;;;;;;;;;;IAGMA,I;;;;;;;;;;;;;;;;;uBAEgBC,uBAAaC,0BAAb,E;;;AAAdC,qB;;uBAEmBC,QAAQC,GAAR,CAAYF,MAAMG,IAAN,CAAWC,GAAX;AAAA,sFAAe,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAC7BP,uBAAaQ,WAAb,CAAyBD,KAAKE,EAA9B,CAD6B;;AAAA;AAC5CC,kCAD4C;AAAA,6DAEzC,EAAED,IAAIF,KAAKE,EAAX,EAAeE,MAAMJ,KAAKI,IAA1B,EAAgCC,OAAOF,OAAOL,IAA9C,EAFyC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAf;;AAAA;AAAA;AAAA;AAAA,oBAAZ,C;;;AAAnBQ,0B;kDAKGA,WAAWC,IAAX,CAAgB,UAACC,CAAD,EAAGC,CAAH,EAAS;AAC9B,yBAAOD,EAAEN,EAAF,GAAOO,EAAEP,EAAhB;AACD,iBAFM,C;;;;;;;;;;;;;;;;;;;4FAKoBQ,O;;;;;;;uBACRjB,uBAAakB,mBAAb,CAAiCD,OAAjC,C;;;AAAfP,sB;;oBACCA,OAAOS,Q;;;;;kDACH,EAAEC,QAAQ,GAAV,EAAeC,MAAM,EAAEC,OAAO,gBAAT,EAArB,E;;;AAEHT,0B,GAAaH,OAAOL,IAAP,CAAYC,GAAZ,CAAgB,eAAO;AACtC,yBAAO;AACLG,wBAAIc,IAAIC,OADH;AAELb,0BAAMY,IAAIE,SAFL;AAGLC,8BAAUH,IAAIG;AAHT,mBAAP;AAKD,iBANgB,C;kDAQV,EAAEN,QAAQ,GAAV,EAAeC,MAAM,EAAEZ,IAAIC,OAAOL,IAAP,CAAY,CAAZ,EAAeY,OAArB,EAA8BN,MAAMD,OAAOL,IAAP,CAAY,CAAZ,EAAesB,SAAnD,EAA8Df,OAAOC,UAArE,EAArB,E;;;;;;;;;;;;;;;;;;;;;kBAKEd,I","file":"Meal.js","sourcesContent":["import QueryService from '../services/QueryService';\n\n\nclass Meal {\n  static async getAllMeals() {\n    let meals = await QueryService.distinctMealsThatHaveFoods();\n\n    let meal_foods = await Promise.all(meals.rows.map(async (meal) => {\n      let result = await QueryService.aMealsFoods(meal.id);\n      return { id: meal.id, name: meal.name, foods: result.rows }\n    }));\n\n    return meal_foods.sort((a,b) => {\n      return a.id - b.id;\n    });\n  }\n\n  static async getMealAndFoods(meal_id) {\n    let result = await QueryService.aMealAndAllItsFoods(meal_id)\n    if (!result.rowCount) {\n      return { status: 404, data: { error: 'Meal not found' } }\n    } else {\n      let meal_foods = result.rows.map(row => {\n        return {\n          id: row.food_id,\n          name: row.food_name,\n          calories: row.calories\n        }\n      });\n\n      return { status: 200, data: { id: result.rows[0].meal_id, name: result.rows[0].meal_name, foods: meal_foods } }\n    }\n  }\n}\n\nexport default Meal;\n"]}