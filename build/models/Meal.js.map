{"version":3,"sources":["../../src/models/Meal.js"],"names":["environment","process","env","NODE_ENV","configuration","require","database","Meal","raw","meals","Promise","all","rows","map","meal","id","result","name","foods","meal_foods","sort","a","b","meal_id","rowCount","status","data","error","row","food_id","food_name","calories","meal_name"],"mappings":";;;;;;;;;;;;AAAA,IAAMA,cAAcC,QAAQC,GAAR,CAAYC,QAAZ,IAAwB,aAA5C;AACA,IAAMC,gBAAgBC,QAAQ,gBAAR,EAA0BL,WAA1B,CAAtB;AACA,IAAMM,WAAWD,QAAQ,MAAR,EAAgBD,aAAhB,CAAjB;;IAEMG,I;;;;;;;;;;;;;;;;;;uBAGgBD,SAASE,GAAT,gI;;;AAAdC,qB;;uBAGmBC,QAAQC,GAAR,CAAYF,MAAMG,IAAN,CAAWC,GAAX;AAAA,sFAAe,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAC7BR,SAASE,GAAT,wJAEwB,CAACM,KAAKC,EAAN,CAFxB,CAD6B;;AAAA;AAC5CC,kCAD4C;AAAA,6DAIzC;AACLD,kCAAID,KAAKC,EADJ;AAELE,oCAAMH,KAAKG,IAFN;AAGLC,qCAAOF,OAAOJ;AAHT,6BAJyC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAf;;AAAA;AAAA;AAAA;AAAA,oBAAZ,C;;;AAAnBO,0B;kDAWGA,WAAWC,IAAX,CAAgB,UAACC,CAAD,EAAGC,CAAH,EAAS;AAC9B,yBAAOD,EAAEN,EAAF,GAAOO,EAAEP,EAAhB;AACD,iBAFM,C;;;;;;;;;;;;;;;;;;;;;;;;4FAQoBQ,O;;;;;;;uBACRjB,SAASE,GAAT,scAK2C,CAACe,OAAD,CAL3C,C;;;AAAfP,sB;;oBAMCA,OAAOQ,Q;;;;;kDACH,EAAEC,QAAQ,GAAV,EAAeC,MAAM,EAAEC,OAAO,gBAAT,EAArB,E;;;AAEHR,0B,GAAaH,OAAOJ,IAAP,CAAYC,GAAZ,CAAgB,eAAO;AACtC,yBAAO;AACLE,wBAAIa,IAAIC,OADH;AAELZ,0BAAMW,IAAIE,SAFL;AAGLC,8BAAUH,IAAIG;AAHT,mBAAP;AAKD,iBANgB,C;kDAQV,EAAEN,QAAQ,GAAV,EAAeC,MAAM,EAAEX,IAAIC,OAAOJ,IAAP,CAAY,CAAZ,EAAeW,OAArB,EAA8BN,MAAMD,OAAOJ,IAAP,CAAY,CAAZ,EAAeoB,SAAnD,EAA8Dd,OAAOC,UAArE,EAArB,E;;;;;;;;;;;;;;;;;;;;;kBAKEZ,I","file":"Meal.js","sourcesContent":["const environment = process.env.NODE_ENV || 'development';\nconst configuration = require('../../knexfile')[environment];\nconst database = require('knex')(configuration);\n\nclass Meal {\n  static async getAllMeals() {\n    try {\n    let meals = await database.raw(`SELECT DISTINCT meals.* from meal_foods\n                                    INNER JOIN meals on meal_foods.meal_id=meals.id`);\n\n    let meal_foods = await Promise.all(meals.rows.map(async (meal) => {\n      let result = await database.raw(`SELECT foods.* from meal_foods\n                    INNER JOIN foods on meal_foods.food_id=foods.id\n                    WHERE meal_foods.meal_id=?`, [meal.id])\n      return {\n        id: meal.id,\n        name: meal.name,\n        foods: result.rows\n      }\n    }));\n\n    return meal_foods.sort((a,b) => {\n      return a.id - b.id;\n    });\n    } catch(error) {\n      return error;\n    }\n  }\n\n  static async getMealAndFoods(meal_id) {\n    let result = await database.raw(`SELECT meals.id AS meal_id, meals.name AS meal_name,\n                                            foods.id AS food_id, foods.name AS food_name, foods.calories\n                                     FROM meal_foods\n                                     INNER JOIN meals on meal_foods.meal_id=meals.id\n                                     INNER JOIN foods on meal_foods.food_id=foods.id\n                                     WHERE meal_foods.meal_id=?`, [meal_id])\n    if (!result.rowCount) {\n      return { status: 404, data: { error: 'Meal not found' } }\n    } else {\n      let meal_foods = result.rows.map(row => {\n        return {\n          id: row.food_id,\n          name: row.food_name,\n          calories: row.calories\n        }\n      });\n\n      return { status: 200, data: { id: result.rows[0].meal_id, name: result.rows[0].meal_name, foods: meal_foods } }\n    }\n  }\n}\n\nexport default Meal;\n"]}