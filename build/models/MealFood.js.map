{"version":3,"sources":["../../src/models/MealFood.js"],"names":["MealFood","meal_id","food_id","QueryService","aMeal","meal","aFood","food","rowCount","status","data","error","createMealFood","result","message","rows","name","removeMealFood"],"mappings":";;;;;;qjBAAA;AACA;AACA;;;AACA;;AAEA;;;;;;;;;;IAEMA,Q;;;;;;;;0FACuBC,O,EAASC,O;;;;;;;uBACjBC,uBAAaC,KAAb,CAAmBH,OAAnB,C;;;AAAbI,oB;;uBACaF,uBAAaG,KAAb,CAAmBJ,OAAnB,C;;;AAAbK,oB;;oBAECA,KAAKC,Q;;;;;iDACD,EAAEC,QAAQ,GAAV,EAAeC,MAAM,EAAEC,OAAO,yBAAT,EAArB,E;;;oBACGN,KAAKG,Q;;;;;iDACR,EAAEC,QAAQ,GAAV,EAAeC,MAAM,EAACC,OAAO,yBAAR,EAArB,E;;;;uBAEYR,uBAAaS,cAAb,CAA4BX,OAA5B,EAAqCC,OAArC,C;;;AAAfW,sB;iDACG,EAAEJ,QAAQ,GAAV,EAAeC,MAAM,EAAEI,iCAA+BP,KAAKQ,IAAL,CAAU,CAAV,EAAaC,IAA5C,YAAuDX,KAAKU,IAAL,CAAU,CAAV,EAAaC,IAAtE,EAArB,E;;;;;;;;;;;;;;;;;;;4FAIqBf,O,EAASC,O;;;;;;;uBACtBC,uBAAaC,KAAb,CAAmBH,OAAnB,C;;;AAAbI,oB;;uBACaF,uBAAaG,KAAb,CAAmBJ,OAAnB,C;;;AAAbK,oB;;oBAECA,KAAKC,Q;;;;;kDACD,EAAEC,QAAQ,GAAV,EAAeC,MAAM,EAAEC,OAAO,yBAAT,EAArB,E;;;oBACGN,KAAKG,Q;;;;;kDACR,EAAEC,QAAQ,GAAV,EAAeC,MAAM,EAACC,OAAO,yBAAR,EAArB,E;;;;uBAEYR,uBAAac,cAAb,CAA4BhB,OAA5B,EAAqCC,OAArC,C;;;AAAfW,sB;kDACG,EAAEJ,QAAQ,GAAV,EAAeC,MAAM,EAAEI,mCAAiCP,KAAKQ,IAAL,CAAU,CAAV,EAAaC,IAA9C,cAA2DX,KAAKU,IAAL,CAAU,CAAV,EAAaC,IAA1E,EAArB,E;;;;;;;;;;;;;;;;;;;;;kBAKEhB,Q","file":"MealFood.js","sourcesContent":["// const environment = process.env.NODE_ENV || 'development';\n// const configuration = require('../../knexfile')[environment];\n// const database = require('knex')(configuration);\nimport { database } from '../config';\n\nimport QueryService from '../services/QueryService';\n\nclass MealFood {\n  static async addFoodToMeal(meal_id, food_id) {\n    let meal = await QueryService.aMeal(meal_id);\n    let food = await QueryService.aFood(food_id);\n\n    if (!food.rowCount) {\n      return { status: 404, data: { error: 'Food could not be found' } };\n    } else if (!meal.rowCount) {\n      return { status: 404, data: {error: 'Meal could not be found' } };\n    } else {\n      let result = await QueryService.createMealFood(meal_id, food_id)\n      return { status: 201, data: { message: `Successfully added ${food.rows[0].name} to ${meal.rows[0].name }` } };\n    }\n  }\n\n  static async removeFoodFromMeal(meal_id, food_id) {\n    let meal = await QueryService.aMeal(meal_id);\n    let food = await QueryService.aFood(food_id);\n\n    if (!food.rowCount) {\n      return { status: 404, data: { error: 'Food could not be found' } };\n    } else if (!meal.rowCount) {\n      return { status: 404, data: {error: 'Meal could not be found' } };\n    } else {\n      let result = await QueryService.removeMealFood(meal_id, food_id)\n      return { status: 200, data: { message: `Successfully removed ${food.rows[0].name} from ${meal.rows[0].name}` } };\n    }\n  }\n}\n\nexport default MealFood;\n"]}