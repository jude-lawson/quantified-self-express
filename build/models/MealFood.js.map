{"version":3,"sources":["../../src/models/MealFood.js"],"names":["environment","process","env","NODE_ENV","configuration","require","database","MealFood","meal_id","food_id","raw","meal","food","rowCount","status","data","error","result","message","rows","name"],"mappings":";;;;;;;;;;;;AAAA,IAAMA,cAAcC,QAAQC,GAAR,CAAYC,QAAZ,IAAwB,aAA5C;AACA,IAAMC,gBAAgBC,QAAQ,gBAAR,EAA0BL,WAA1B,CAAtB;AACA,IAAMM,WAAWD,QAAQ,MAAR,EAAgBD,aAAhB,CAAjB;;IAEMG,Q;;;;;;;;0FACuBC,O,EAASC,O;;;;;;;uBACjBH,SAASI,GAAT,CAAa,8CAAb,EAA6D,CAACF,OAAD,CAA7D,C;;;AAAbG,oB;;uBACaL,SAASI,GAAT,CAAa,8CAAb,EAA6D,CAACD,OAAD,CAA7D,C;;;AAAbG,oB;;oBAECA,KAAKC,Q;;;;;iDACD,EAAEC,QAAQ,GAAV,EAAeC,MAAM,EAAEC,OAAO,yBAAT,EAArB,E;;;oBACGL,KAAKE,Q;;;;;iDACR,EAAEC,QAAQ,GAAV,EAAeC,MAAM,EAACC,OAAO,yBAAR,EAArB,E;;;;uBAEYV,SAASI,GAAT,oGAC8B,CAACF,OAAD,EAAUC,OAAV,CAD9B,C;;;AAAfQ,sB;iDAEG,EAAEH,QAAQ,GAAV,EAAeC,MAAM,EAAEG,iCAA+BN,KAAKO,IAAL,CAAU,CAAV,EAAaC,IAA5C,YAAuDT,KAAKQ,IAAL,CAAU,CAAV,EAAaC,IAAtE,EAArB,E;;;;;;;;;;;;;;;;;;;4FAIqBZ,O,EAASC,O;;;;;;;uBACtBH,SAASI,GAAT,CAAa,8CAAb,EAA6D,CAACF,OAAD,CAA7D,C;;;AAAbG,oB;;uBACaL,SAASI,GAAT,CAAa,8CAAb,EAA6D,CAACD,OAAD,CAA7D,C;;;AAAbG,oB;;oBAECA,KAAKC,Q;;;;;kDACD,EAAEC,QAAQ,GAAV,EAAeC,MAAM,EAAEC,OAAO,yBAAT,EAArB,E;;;oBACGL,KAAKE,Q;;;;;kDACR,EAAEC,QAAQ,GAAV,EAAeC,MAAM,EAACC,OAAO,yBAAR,EAArB,E;;;;uBAEYV,SAASI,GAAT,+JAEyC,CAACF,OAAD,EAAUC,OAAV,CAFzC,C;;;AAAfQ,sB;kDAGG,EAAEH,QAAQ,GAAV,EAAeC,MAAM,EAAEG,mCAAiCN,KAAKO,IAAL,CAAU,CAAV,EAAaC,IAA9C,cAA2DT,KAAKQ,IAAL,CAAU,CAAV,EAAaC,IAA1E,EAArB,E;;;;;;;;;;;;;;;;;;;;;kBAKEb,Q","file":"MealFood.js","sourcesContent":["const environment = process.env.NODE_ENV || 'development';\nconst configuration = require('../../knexfile')[environment];\nconst database = require('knex')(configuration);\n\nclass MealFood {\n  static async addFoodToMeal(meal_id, food_id) {\n    let meal = await database.raw('SELECT * FROM meals WHERE meals.id=? LIMIT 1', [meal_id]);\n    let food = await database.raw('SELECT * FROM foods WHERE foods.id=? LIMIT 1', [food_id]);\n\n    if (!food.rowCount) {\n      return { status: 404, data: { error: 'Food could not be found' } };\n    } else if (!meal.rowCount) {\n      return { status: 404, data: {error: 'Meal could not be found' } };\n    } else {\n      let result = await database.raw(`INSERT INTO meal_foods (meal_id, food_id)\n                                       VALUES (?, ?)`, [meal_id, food_id]);\n      return { status: 201, data: { message: `Successfully added ${food.rows[0].name} to ${meal.rows[0].name }` } };\n    }\n  }\n\n  static async removeFoodFromMeal(meal_id, food_id) {\n    let meal = await database.raw('SELECT * FROM meals WHERE meals.id=? LIMIT 1', [meal_id]);\n    let food = await database.raw('SELECT * FROM foods WHERE foods.id=? LIMIT 1', [food_id]);\n\n    if (!food.rowCount) {\n      return { status: 404, data: { error: 'Food could not be found' } };\n    } else if (!meal.rowCount) {\n      return { status: 404, data: {error: 'Meal could not be found' } };\n    } else {\n      let result = await database.raw(`DELETE FROM meal_foods\n                                       WHERE meal_foods.meal_id=?\n                                       AND meal_foods.food_id=?`, [meal_id, food_id])\n      return { status: 200, data: { message: `Successfully removed ${food.rows[0].name} from ${meal.rows[0].name}` } };\n    }\n  }\n}\n\nexport default MealFood;\n"]}