{"version":3,"sources":["../../src/services/QueryService.js"],"names":["QueryService","select","food_id","database","raw","new_food_data","name","calories","updated_food_data","meal_id"],"mappings":";;;;;;;;AAAA;;;;;;IAEMA,Y;;;;;;;;AACJ;;;;;;;;uBAEe,sBAAS,OAAT,EAAkBC,MAAlB,E;;;;;;;;;;;;;;;;;;;;;;4FAGIC,O;;;;;;uBACJC,iBAASC,GAAT,+CAA2D,CAACF,OAAD,CAA3D,C;;;;;;;;;;;;;;;;;;;;;;4FAGSG,a;;;;;;uBACTF,iBAASC,GAAT,kHAEc,CAACC,cAAcC,IAAf,EAAqBD,cAAcE,QAAnC,CAFd,C;;;;;;;;;;;;;;;;;;;;;;4FAKSC,iB,EAAmBN,O;;;;;;uBAC5BC,iBAASC,GAAT,sHAEc,CAACI,kBAAkBF,IAAnB,EAAyBE,kBAAkBD,QAA3C,EAAqDL,OAArD,CAFd,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAMAC,iBAASC,GAAT,mc;;;;;;;;;;;;;;;;;;;;;;4FAS0BF,O;;;;;;uBAC1BC,iBAASC,GAAT,CAAa,mDAAb,EAAkE,CAACF,OAAD,CAAlE,C;;;;;;;;;;;;;;;;;;;;;;4FAGSA,O;;;;;;uBACTC,iBAASC,GAAT,CAAa,oCAAb,EAAmD,CAACF,OAAD,CAAnD,C;;;;;;;;;;;;;;;;;;;;AAGf;;;;;4FAEmBO,O;;;;;;uBACJN,iBAASC,GAAT,CAAa,8CAAb,EAA6D,CAACK,OAAD,CAA7D,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAIAN,iBAASC,GAAT,6R;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAOAD,iBAASC,GAAT,2H;;;;;;;;;;;;;;;;;;;;;;8FAIUK,O;;;;;;uBACVN,iBAASC,GAAT,8KAE2C,CAACK,OAAD,CAF3C,C;;;;;;;;;;;;;;;;;;;;;;8FAKkBA,O;;;;;;uBAClBN,iBAASC,GAAT,8ZAK0C,CAACK,OAAD,CAL1C,C;;;;;;;;;;;;;;;;;;;;AAQf;;;;;8FAE4BA,O,EAASP,O;;;;;;uBACtBC,iBAASC,GAAT,4FAC8B,CAACK,OAAD,EAAUP,OAAV,CAD9B,C;;;;;;;;;;;;;;;;;;;;;;8FAIaO,O,EAASP,O;;;;;;uBACtBC,iBAASC,GAAT,+IAEyC,CAACK,OAAD,EAAUP,OAAV,CAFzC,C;;;;;;;;;;;;;;;;;;;;;;;;kBAMFF,Y","file":"QueryService.js","sourcesContent":["import { database } from '../config';\n\nclass QueryService {\n  // Food Related Queries\n  static async allFoods() {\n    return await database('foods').select()\n  }\n\n  static async aFood(food_id) {\n    return await database.raw(`SELECT foods.* FROM foods WHERE foods.id=?`, [food_id]);\n  }\n\n  static async createFood(new_food_data) {\n    return await database.raw(`INSERT INTO foods (name, calories) VALUES (?, ?)\n                               RETURNING id, name, calories` , \n                               [new_food_data.name, new_food_data.calories])\n  }\n\n  static async updateFood(updated_food_data, food_id) {\n    return await database.raw(`UPDATE foods SET name=?, calories=?\n                               WHERE foods.id=? RETURNING id, name, calories`,\n                               [updated_food_data.name, updated_food_data.calories, food_id])\n  }\n\n  static async getFoodCounts() {\n    return await database.raw(`SELECT foods.*, COUNT(foods.id) AS food_count, array_agg(meals.name) AS meals_when_eaten\n                               FROM meal_foods\n                               INNER JOIN foods ON meal_foods.food_id = foods.id\n                               INNER JOIN meals ON meal_foods.meal_id = meals.id\n                               GROUP BY foods.id\n                               ORDER BY food_count DESC\n                               LIMIT 5`)\n  }\n\n  static async deleteFoodToMealAssociation(food_id) {\n    return await database.raw('DELETE FROM meal_foods WHERE meal_foods.food_id=?', [food_id])\n  }\n\n  static async deleteFood(food_id) {\n    return await database.raw('DELETE FROM foods WHERE foods.id=?', [food_id])\n  }\n\n  // Meal Queries\n\n  static async aMeal(meal_id) {\n    return await database.raw('SELECT * FROM meals WHERE meals.id=? LIMIT 1', [meal_id])\n  }\n\n  static async allMeals() {\n    return await database.raw(`SELECT meals.id, meals.name, json_agg(foods.*) AS foods FROM meal_foods\n                               INNER JOIN meals ON meal_foods.meal_id=meals.id\n                               INNER JOIN foods ON meal_foods.food_id=foods.id\n                               GROUP BY meals.id`)\n  }\n\n  static async distinctMealsThatHaveFoods() {\n    return await database.raw(`SELECT DISTINCT meals.* from meal_foods\n                               INNER JOIN meals on meal_foods.meal_id=meals.id`)\n  }\n\n  static async aMealsFoods(meal_id) {\n    return await database.raw(`SELECT foods.* from meal_foods\n                               INNER JOIN foods on meal_foods.food_id=foods.id\n                               WHERE meal_foods.meal_id=?`, [meal_id])\n  }\n\n  static async aMealAndAllItsFoods(meal_id) {\n    return await database.raw(`SELECT meals.id AS meal_id, meals.name AS meal_name,\n                                foods.id AS food_id, foods.name AS food_name, foods.calories\n                              FROM meal_foods\n                              INNER JOIN meals on meal_foods.meal_id=meals.id\n                              INNER JOIN foods on meal_foods.food_id=foods.id\n                              WHERE meal_foods.meal_id=?`, [meal_id])\n  }\n\n  // Meal Food Queries\n\n  static async createMealFood(meal_id, food_id) {\n    return await database.raw(`INSERT INTO meal_foods (meal_id, food_id)\n                               VALUES (?, ?)`, [meal_id, food_id])\n  }\n\n  static async removeMealFood(meal_id, food_id) {\n    return await database.raw(`DELETE FROM meal_foods\n                               WHERE meal_foods.meal_id=?\n                               AND meal_foods.food_id=?`, [meal_id, food_id])\n  }\n}\n\nexport default QueryService;\n\n"]}